from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
import bs4
import time
import pandas as pd
import random
import os
import re
import json
from dotenv import load_dotenv
# ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ü‡∏•‡πå .env ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
load_dotenv(dotenv_path=".env")

URL = os.getenv("URL")

def find_answer_exams():
    options = webdriver.ChromeOptions()
    options.add_argument('--disable-tensorflow')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô TensorFlow
    options.add_argument('--disable-software-rasterizer')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏Å
    options.add_experimental_option("detach", True)
    options.add_experimental_option("excludeSwitches", ['enable-automation'])
    driver = webdriver.Chrome(options=options)

    print(f"URL: {URL}, Type: {type(URL)}")

    driver.get(URL)

    time.sleep(1)
    driver.execute_script("document.body.style.zoom='70%'")



    def generate_random_answer():
        answers = [
            "‡πÑ‡∏´‡∏°‡πÑ‡∏ó‡∏¢ ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏¥‡∏ô",
            "‡∏°‡∏ô‡πÅ‡∏Ñ‡∏ô‡∏ï‡πå ‡πÅ‡∏Å‡πà‡∏ô‡∏Ñ‡∏π‡∏ì",
            "‡∏•‡∏≥‡πÑ‡∏¢ ‡πÑ‡∏´",
            "‡∏ï‡∏¥‡πä‡∏Å ‡∏ä‡∏µ‡πÇ‡∏£‡πà"
        ]
        return random.choice(answers)


    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        data = driver.page_source
        soup = bs4.BeautifulSoup(data, "html.parser")
        list_items = soup.select(
            '#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div')

        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
        for index, item in enumerate(list_items, 1):
            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Radio options (‡∏ä‡πâ‡∏≠‡∏¢‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö)
            radio_options = driver.find_elements(By.CSS_SELECTOR,
                                                f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) div[role='radio']")

            if radio_options:
                # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                valid_options = radio_options[1:] if len(
                    radio_options) > 1 else radio_options
                if valid_options:
                    random_option = random.choice(valid_options)
                    option_text = random_option.text.strip()
                    driver.execute_script("arguments[0].scrollIntoView();", random_option)
                    driver.execute_script("arguments[0].click();", random_option)
                    print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πâ‡∏≠‡∏¢‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö: {option_text}")
                    time.sleep(0.5)
                    continue

            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Text input
            text_inputs = driver.find_elements(By.CSS_SELECTOR,
                                            f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) input[type='text']")
            if text_inputs:
                answer = generate_random_answer()
                text_inputs[0].send_keys(answer)
                print(f"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {answer}")
                continue

            # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dropdown
            dropdown = driver.find_elements(By.CSS_SELECTOR, 
                ".MocG8c.HZ3kWc.mhLiyf.LMgvRb.KKjvXb.DEh1R")

            if dropdown:
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô dropdown ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô viewport
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", dropdown[0])
                time.sleep(0.5)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ UI ‡πÇ‡∏´‡∏•‡∏î

                print(f"Dropdown‡∏°‡∏µ: {len(dropdown)}‡∏ï‡∏±‡∏ß")

                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
                driver.execute_script("arguments[0].scrollIntoView();", dropdown[0])
                driver.execute_script("arguments[0].click();", dropdown[0])
                time.sleep(1)

                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô dropdown
                options = driver.find_elements(By.CSS_SELECTOR, 
                    ".MocG8c.HZ3kWc.mhLiyf.LMgvRb.KKjvXb.DEh1R[aria-selected='false']")

                if options:
                    random_option = random.choice(options)
                    driver.execute_script("arguments[0].scrollIntoView();", random_option)
                    driver.execute_script("arguments[0].click();", random_option)
                    print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown: {random_option.text.strip()}")
                    time.sleep(0.5)



            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Radio ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
            other_radio_options = driver.find_elements(By.CSS_SELECTOR,
                                                        f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) div[role='option']")
            if other_radio_options:
                valid_options = [
                    opt for opt in other_radio_options if opt.text.strip() != "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]
                if valid_options:
                    random_option = random.choice(valid_options)
                    option_text = random_option.text.strip()
                    driver.execute_script("arguments[0].scrollIntoView();",random_option)
                    driver.execute_script("arguments[0].click();", random_option)
                    print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å radio: {option_text}")
                    time.sleep(0.5)
                continue
        
        time.sleep(1)

        # ‡πÉ‡∏ä‡πâ JavaScript ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
        try:
            submit_button = driver.find_element(By.CSS_SELECTOR, "div[aria-label='Submit']")
            driver.execute_script("arguments[0].click();", submit_button)
            print("\n########### ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡πà‡∏á' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")
        except NoSuchElementException:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á (Submit button) ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")
            submit_button = driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
            for idx, btn in enumerate(submit_button):
                print(f'‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ôButton‡∏ó‡∏µ‡πà {idx} role=button: {btn.text}')

                if "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" in btn.text.strip():
                    driver.execute_script("arguments[0].click();", btn)
                    print("\n########### ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")



    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")



    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πâ‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    try:
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Radio Group ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        radio_groups = driver.find_elements(By.CSS_SELECTOR, 'div[role="radiogroup"]')

        for idx, group in enumerate(radio_groups):
            print(f"\nüîπ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {idx + 1}\n{'-'*30}")

            # ‡∏´‡∏≤ radio options ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô
            radio_options = group.find_elements(By.CSS_SELECTOR, 'div[role="radio"]')

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (aria-checked="false")
            unchecked_options = [opt for opt in radio_options if opt.get_attribute("aria-checked") == "false"]

            if unchecked_options:
                # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                random_choice = random.choice(unchecked_options)
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", random_choice)
                time.sleep(0.5)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ UI ‡πÇ‡∏´‡∏•‡∏î

                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                driver.execute_script("arguments[0].scrollIntoView();", random_choice)
                driver.execute_script("arguments[0].click();", random_choice)
                print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {random_choice.get_attribute('aria-label')}")

            else:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

            time.sleep(1)  # ‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    except Exception as e:
        print(f"EXCEPT: {e}")

    submit_button = driver.find_element(By.CSS_SELECTOR, "div[aria-label='Submit']")
    driver.execute_script("arguments[0].click();", submit_button)
    print("\n########### ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡πà‡∏á' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡πÇ‡∏´‡∏•‡∏î
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[role='presentation']")))

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'
    view_score = driver.find_elements(By.CSS_SELECTOR, "div[role='presentation']")

    for idx, btn in enumerate(view_score):
        text = btn.text.strip()
        print(f'‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Button ‡∏ó‡∏µ‡πà {idx}: {repr(text)}')

        if "‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in text:
            print(f"\nüéØ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î...\n")

            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)

            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ
            WebDriverWait(driver, 10).until(EC.element_to_be_clickable(btn))

            try:
                btn.click()  # ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                print("\n‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (click)\n")
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°: {e}")
                driver.execute_script("arguments[0].click();", btn)  # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ JS
                print("\n‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (JS click)\n")

    # ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    time.sleep(2)
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ window handles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    tabs = driver.window_handles

    # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ó‡πá‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    driver.switch_to.window(tabs[-1])

    print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ element ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "label.docssharedWizToggleLabeledContainer.LygNqb.N2RpBe.O4MBef.RDPZE")))

    driver.execute_script("document.body.style.zoom='70%'")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    correct_label = driver.find_elements(By.CSS_SELECTOR, "label.docssharedWizToggleLabeledContainer.LygNqb.N2RpBe.O4MBef.RDPZE")
    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    correct_answers = []

    print(f"‡∏û‡∏ö {len(correct_label)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö\n")
    i = 1
    for idx, label in enumerate(correct_label):
        # ‡πÉ‡∏ä‡πâ xpath ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ div ‡∏•‡∏π‡∏Å‡∏ï‡∏£‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á label
        div_children = label.find_elements(By.XPATH, "./div")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô div ‡∏•‡∏π‡∏Å‡∏ï‡∏£‡∏á‡πÜ ‡∏°‡∏µ aria-label="‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        invalid_div = label.find_elements(By.XPATH, ".//div[@aria-label='‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á']")
        
        # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö div ‡∏ó‡∏µ‡πà‡∏°‡∏µ aria-label="‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        if invalid_div:
            # print(f"‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {idx+1} ‡∏Ç‡πâ‡∏≤‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ div ‡∏ó‡∏µ‡πà‡∏°‡∏µ aria-label='‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'")
            continue

        correct_answers.append({
            "question": i,
            "anwser": label.text
        })

        print(f"\033[1;32m‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {i} ‡∏ï‡∏≠‡∏ö:\033[0m {label.text}")  # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        
        i+=1
        print('-' * 50)  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô


    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
    try:
        with open("correct_answers.json", "w", encoding="utf-8") as json_file:
            json.dump(correct_answers, json_file, ensure_ascii=False, indent=4)
            print("\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à!\n")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

    # ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    time.sleep(3)
    driver.quit()

def answer_exams():
    delay = 2
    def open_website():
        options = webdriver.ChromeOptions()
        options.add_argument('--disable-tensorflow')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô TensorFlow
        options.add_argument('--disable-software-rasterizer')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏Å
        options.add_experimental_option("detach", True)
        options.add_experimental_option("excludeSwitches", ['enable-automation'])
        driver = webdriver.Chrome(options=options)

        driver.get(URL)

        time.sleep(delay)
        driver.execute_script("document.body.style.zoom='70%'")
        return driver

    driver = open_website()

    """

    ‡∏Å‡∏£‡∏≠‡∏Å Input Text

    """

    # Load environment variables from .env file
    SCHOOL = os.getenv('SCHOOL')
    NUMBER_STUDENT = os.getenv('NUMBER_STUDENT')
    PREFIX = os.getenv('PREFIX')
    NAME = os.getenv('NAME')
    CLASS = os.getenv('CLASS')
    NO = os.getenv('NO')

    # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
    input_data = {
        "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô": SCHOOL,
        "‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô": NUMBER_STUDENT,
        "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠": PREFIX,
        "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": NAME,
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô": CLASS,
        "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà": NO
    }

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    data = driver.page_source
    soup = bs4.BeautifulSoup(data, "html.parser")
    list_items = soup.select(
        '#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div')

    for index, item in enumerate(list_items, 1):
        text = item.text.split(" ")[0]  # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        # Check text
        text_inputs = driver.find_elements(By.CSS_SELECTOR,
                                    f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) input[type='text']")
        if text_inputs:
            text_inputs[0].send_keys(input_data[text])
            print(f'‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á "{text}" ‡πÄ‡∏™‡∏£‡πá‡∏à')

    """

    ‡∏Å‡∏£‡∏≠‡∏Å Input Radio, Dropdown

    """

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    data = driver.page_source
    soup = bs4.BeautifulSoup(data, "html.parser")
    list_items = soup.select(
        '#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div')

    for index, item in enumerate(list_items, 1):
        text = item.text.split(" ")[0]  # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dropdown ‡∏Ç‡∏≠‡∏á index ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        dropdowns = driver.find_elements(By.CSS_SELECTOR, 
            f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) .MocG8c.HZ3kWc.mhLiyf.LMgvRb.KKjvXb.DEh1R")

        if dropdowns:
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", dropdowns[0])
            time.sleep(0.5)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ UI ‡πÇ‡∏´‡∏•‡∏î

            print(f"üìå ‡∏û‡∏ö Dropdown ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á: {text}")

            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏¥‡∏î dropdown
            driver.execute_script("arguments[0].click();", dropdowns[0])
            time.sleep(1)

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô radio dropdown other
            options = driver.find_elements(By.CSS_SELECTOR, 
                f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) div[role='option']")
            
            valid_options = [
                opt for opt in options if opt.text.strip() != "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
            if text in input_data or options:
                selected_option = None
                for op in valid_options:
                    time.sleep(1)
                    option = op.text.replace('‡∏°.', '')
                    # print(f"{option}, {input_data[text]}, {option == input_data[text]}")

                    if option == input_data[text]:
                        selected_option = op
                        print(f'‡πÄ‡∏à‡∏≠ {input_data[text]} selected_option: {op.text}')
                        break
                
                # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                if selected_option:
                    driver.execute_script("arguments[0].scrollIntoView();", selected_option)
                    driver.execute_script("arguments[0].click();", selected_option)
                    print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {input_data['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô']} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {text}")
                else:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{text}'")
            
            time.sleep(1)

    # ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
    want_click_name = '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'
    try:
        submit_button = driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
        i = 0
        for btn in submit_button:
            if btn.text.strip() == want_click_name:  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà trim ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                driver.execute_script("arguments[0].click();", btn)
                print(f"\n###########üì© ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '{want_click_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")
                i+=1
        if i <= 0:
            print(f"‚ùå‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° '{want_click_name}'")

    except Exception as e:
        print(e)

    """

    ‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å JSON ‡∏°‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Input Radio, Dropdown

    """

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    data = driver.page_source
    soup = bs4.BeautifulSoup(data, "html.parser")
    list_items = soup.select('div[role=listitem]')

    # ‡πÇ‡∏´‡∏•‡∏î JSON
    with open('correct_answers.json', 'r', encoding='utf-8') as file:
        correct_answers = json.load(file)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    answer_dict = {item['question']: item['anwser'].strip() for item in correct_answers}

    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    for index, item in enumerate(list_items, 1):
        try:
            print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {index}")
            
            # ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            question_elem = item.select_one('div[role="heading"]')
            if not question_elem:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {index}")
                continue
                
            # ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            question_text = question_elem.get_text().strip()
            question_num_match = re.search(r'(\d+)\.', question_text)
            
            if question_num_match:
                question_num = int(question_num_match.group(1))
                print(f"‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà: {question_num}")
                
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å dictionary
                if question_num in answer_dict:
                    correct_answer_text = answer_dict[question_num]
                    print(f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠: {correct_answer_text}")
                    
                    # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    radio_options = item.select('div.Od2TWd.hYsg7c')
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if not radio_options:
                        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ")
                        continue
                    
                    # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    found_match = False
                    for radio in radio_options:
                        label_text = radio.get('aria-label', '').strip()
                        
                        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        if label_text == correct_answer_text or correct_answer_text.startswith(label_text[:2]):
                            # ‡πÉ‡∏ä‡πâ selenium ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                            radio_id = radio.get('id')
                            if radio_id:
                                try:
                                    driver.find_element(By.ID, radio_id).click()
                                    print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ID: {radio_id} - {label_text}")
                                    found_match = True
                                    break
                                except Exception as e:
                                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {str(e)}")
                    
                    if not found_match:
                        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {correct_answer_text}")
                else:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {question_num} ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question_text}")
        
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")


    # ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö 10‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÜ
    want_click_name = '‡∏™‡πà‡∏á'
    try:
        submit_button = driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
        i = 0
        for btn in submit_button:
            if btn.text.strip() == want_click_name:  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà trim ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                driver.execute_script("arguments[0].click();", btn)
                print(f"\n###########üì© ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '{want_click_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")
                i+=1
        if i <= 0:
            print(f"‚ùå‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° '{want_click_name}'")

    except Exception as e:
        print(e)

    # ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    want_click_name = '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'
    try:
        submit_button = driver.find_elements(By.CSS_SELECTOR, 'a[aria-label="‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"]')
        i = 0
        for btn in submit_button:
            if btn.text.strip() == want_click_name:  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà trim ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                driver.execute_script("arguments[0].click();", btn)
                print(f"\n###########üì© ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '{want_click_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")
                i+=1
        if i <= 0:
            print(f"‚ùå‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° '{want_click_name}'")

    except Exception as e:
        print(e)

    # ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    time.sleep(1)
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ window handles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    tabs = driver.window_handles

    # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ó‡πá‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    driver.switch_to.window(tabs[-1])

    print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    try:
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Element ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        wait = WebDriverWait(driver, 10)
        score_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body > div > div:nth-child(2) > div:nth-child(1) > div > div.Dq4amc > div > div.N0gd6 > div.ahS2Le > div.tV8Uvb")))

        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        score_text = score_element.text
        print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {score_text}")

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    print("\n" + "="*50)
    print("üèÜ‡∏†‡∏≤‡∏£‡∏∞‡∏Å‡∏¥‡∏à‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ôüíØ")
    print("="*50 + "\n")

    # ‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    try:
        score = driver.find_elements(By.CSS_SELECTOR, 'div.tV8Uvb')
        driver.save_screenshot("mobile_screenshot.png")
        print("‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà mobile_screenshot.png")
    except Exception as e:
        print(e)

if __name__ == "__main__":
    find_answer_exams()
    print("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à!\n")

    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
    answer_exams()